create table if not exists login
(
    id                                  bigint not null generated by default as identity (start with 101 increment by 1),
    username                            text not null,
    password                            text not null,
    enabled                             boolean default true,
    update_login_id                     bigint not null,
    update_timestamp                    timestamp with time zone not null,
    constraint pk_login primary key(id)
);
create unique index if not exists uk_login_username ON login (username);

-- Insert record for super admin login
insert into login
(id, username, password, enabled, update_login_id, update_timestamp)
select 1, 'admin', '$argon2id$v=19$m=4096,t=3,p=1$3vltMkuYEq7ztBfR2OC92w$j+gNbKE7LOcD7hCM+T0zHxPK3Mb/B0bOlBNdGJeviWw',
true, 1, now() where not exists (select 1 from login where username = 'admin');

create table if not exists role
(
    id                                  bigint not null generated by default as identity (start with 101 increment by 1),
    name                                text not null,
    description                         text,
    system_role                         boolean default false,
    update_login_id                     bigint not null,
    update_timestamp                    timestamp with time zone not null,
    constraint pk_role primary key(id),
    constraint fk_role_login foreign key (update_login_id) references login (id) on delete cascade
);

create table if not exists permission
(
    id                                  bigint not null generated by default as identity (start with 101 increment by 1),
    name                                text not null,
    description                         text not null,
    constraint pk_permission primary key(id)
);

create table if not exists login_role
(
    login_id                            bigint not null,
    role_id                             bigint not null,
    update_login_id                     bigint not null,
    update_timestamp                    timestamp with time zone not null,
    constraint pk_login_role primary key(login_id, role_id),
    constraint fk_login_role_login foreign key (update_login_id) references login (id) on delete cascade,
    constraint fk_login_role_role foreign key (role_id) references role (id) on delete cascade
);

create table if not exists role_permission
(
    role_id                             bigint not null,
    permission_id                       bigint not null,
    primary key(role_id, permission_id),
    constraint fk_role_permission_role foreign key (role_id) references role (id) on delete cascade,
    constraint fk_role_permission_permission foreign key (permission_id) references permission (id) on delete cascade
);

create table if not exists x_shared_secret
(
    id                                  bigint not null generated by default as identity,
    create_datetime                     timestamp with time zone default now(),
    key                                 text not null,
    constraint pk_x_shared_secret primary key(id)
);

create table if not exists session
(
    username                            text not null,
    consecutive_refreshes               int not null,
    access_token                        text not null,
    refresh_token                       text not null,
    create_datetime                     timestamp with time zone default now(),
    constraint pk_session primary key(username)
);
create index if not exists idx_session_access_token ON session (access_token);
create index if not exists idx_session_refresh_token ON session (refresh_token);

create table if not exists failed_login
(
    login_id                            bigint not null,
    consecutive_fail_count              int not null,
    update_timestamp                    timestamp with time zone default now(),
    constraint pk_failed_login primary key(login_id)
);

create table if not exists status
(
    id                                  bigint not null,
    name                                text not null,
    constraint pk_status primary key(id)
);

insert into status (id, name) select 1, 'active' where not exists (select 1 from status where name = 'active');
insert into status (id, name) select 2, 'inactive' where not exists (select 1 from status where name = 'inactive');
insert into status (id, name) select 3, 'pending' where not exists (select 1 from status where name = 'pending');
insert into status (id, name) select 4, 'suspended' where not exists (select 1 from status where name = 'suspended');
insert into status (id, name) select 5, 'locked' where not exists (select 1 from status where name = 'locked');

create table if not exists person
(
    id                      			bigint not null generated by default as identity,
    login_id                            bigint null,
    status_id                           bigint not null,
    first_name              			text,
    last_name               			text,
    email_address           			text null,
    constraint pk_person primary key(id),
	constraint fk_person_login foreign key (login_id) references login (id) on delete cascade on update cascade,
	constraint fk_person_status foreign key(status_id) references status(id) on delete cascade on update cascade
);
create unique index if not exists uk_person_email_address on person (email_address);

create table if not exists application
(
    id                      			bigint not null generated by default as identity,
    login_id                            bigint null,
    status_id                           bigint not null,
    name                      			text not null,
    ip_address               			inet null,
    constraint pk_application primary key(id),
	constraint fk_application_login foreign key (login_id) references login (id) on delete cascade on update cascade,
	constraint fk_application_status foreign key(status_id) references status(id) on delete cascade on update cascade
);

insert into application
(id, login_id, status_id, name, ip_address)
select 1, 1, 1, 'Ecommerce', null where not exists (select 1 from application where id = 1);

create table if not exists user_registration
(
    id                   bigint  not null generated by default as identity,
    first_name           text    not null,
    last_name            text    not null,
    email_address        text    not null,
    password             text    not null,
    status               text not null, -- pending , verified
    constraint pk_user_registration primary key (id),
    constraint uq_user_registration_email unique (email_address)
);

create table if not exists products
(
    id                   bigint not null generated by default as identity (start with 1001 increment by 1),
    sku                  text not null,
    name                 text not null,
    description          text,
    price                numeric(19,4) not null,
    currency             char(3) not null,
    stock                int not null default 0,
    enabled              boolean default true,
    update_login_id      bigint not null,
    update_timestamp     timestamp with time zone not null,
    constraint pk_products primary key (id),
    constraint uq_products_sku unique (sku),
    constraint ck_products_price check (price >= 0),
    constraint ck_products_stock check (stock >= 0),
    constraint fk_products_login foreign key (update_login_id) references login (id) on delete cascade
);

create table if not exists carts
(
    id                   bigint not null generated by default as identity (start with 2001 increment by 1),
    user_id              bigint not null,
    update_login_id      bigint not null,
    update_timestamp     timestamp with time zone not null,
    constraint pk_carts primary key (id),
    constraint uq_carts_user unique (user_id),
    constraint fk_carts_user foreign key (user_id) references login (id) on delete cascade,
    constraint fk_carts_login foreign key (update_login_id) references login (id) on delete cascade
);

create table if not exists cart_items
(
    id                   bigint not null generated by default as identity (start with 3001 increment by 1),
    cart_id              bigint not null,
    product_id           bigint not null,
    product_name         text,
    unit_price           numeric(19,4),
    currency             char(3),
    quantity             int not null,
    update_login_id      bigint not null,
    update_timestamp     timestamp with time zone not null,
    constraint pk_cart_items primary key (id),
    constraint uq_cart_items_product unique (cart_id, product_id),
    constraint ck_cart_items_qty check (quantity > 0),

    constraint fk_cart_items_cart foreign key (cart_id) references carts (id) on delete cascade,
    constraint fk_cart_items_product foreign key (product_id) references products (id) on delete restrict,
    constraint fk_cart_items_login foreign key (update_login_id) references login (id) on delete cascade
);

create index if not exists idx_cart_items_cart on cart_items (cart_id);

create table if not exists orders
(
    id                   bigint not null generated by default as identity (start with 4001 increment by 1),
    user_id              bigint not null,
    status               text not null,         -- e.g. NEW, PAID, SHIPPED, CANCELED
    total                numeric(19,4) not null,
    currency             char(3) not null,
    created_at           timestamp with time zone not null default now(),
    update_login_id      bigint not null,       -- who last updated status/row
    update_timestamp     timestamp with time zone not null,
    constraint pk_orders primary key (id),
    constraint ck_orders_total check (total >= 0),
    constraint fk_orders_user  foreign key (user_id) references login (id) on delete cascade,
    constraint fk_orders_login foreign key (update_login_id) references login (id) on delete cascade
);

create index if not exists idx_orders_user_created on orders (user_id, created_at desc);

create table if not exists order_items
(
    id                   bigint not null generated by default as identity (start with 5001 increment by 1),
    order_id             bigint not null,
    product_id           bigint not null,
    product_name         text not null,
    unit_price           numeric(19,4) not null,
    quantity             int not null,
    line_total           numeric(19,4) not null,
    currency             char(3) not null,
    update_login_id      bigint not null,
    update_timestamp     timestamp with time zone not null,
    constraint pk_order_items primary key (id),
    constraint ck_order_items_qty check (quantity > 0),
    constraint ck_order_items_money check (unit_price >= 0 and line_total >= 0),
    constraint fk_order_items_order   foreign key (order_id)  references orders (id)   on delete cascade,
    constraint fk_order_items_product foreign key (product_id) references products (id) on delete restrict,
    constraint fk_order_items_login   foreign key (update_login_id) references login (id) on delete cascade
);

create index if not exists idx_order_items_order on order_items (order_id);